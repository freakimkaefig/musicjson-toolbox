var commander = require('commander');
var fs = require('fs');
var path = require('path');
var mkdirp = require('mkdirp');
var MusicJsonToolbox = require('../musicjson-toolbox');

var algorithmValue;
var json1Path;
var json2Path;
var outputPath;

commander
  .version(require('../package.json').version)
  .usage('<algorithm> <json1> <json2> <output>')
  .arguments('<algorithm> <json1> <json2> <output>')
  .action(function(algorithm, json1, json2, output) {
    algorithmValue = algorithm;
    json1Path = json1;
    json2Path = json2;
    outputPath = output;
  })
  .on('--help', function() {
    console.log('  Arguments:');
    console.log('');
    console.log('    <json1>   Path to the first json file');
    console.log('    <json2>   Path to the second json file');
    console.log('    <output>  Path to the output file (csv)');
    console.log('');
    console.log('  Examples:');
    console.log('');
    console.log('    node bin/similarityk json/1.json json/2.json csv/output.csv');
    console.log('');
  })
  .parse(process.argv);

if (typeof algorithmValue === 'undefined') {
  console.error('no algortihm specified!');
  process.exit(1);
}
if (typeof json1Path === 'undefined') {
  console.error('no json1 specified!');
  process.exit(1);
}
if (typeof json2Path === 'undefined') {
  console.error('no json2 specified!');
  process.exit(1);
}
if (typeof outputPath === 'undefined') {
  console.error('no output specified!');
  process.exit(1);
}

json1Content = JSON.parse(fs.readFileSync(json1Path, 'utf-8'));
json2Content = JSON.parse(fs.readFileSync(json2Path, 'utf-8'));

var outputContent, i, j;
if (algorithmValue === 'ms') {
  outputContent = 'k1resu ;similarity\n';
  for (i = 1; i <= 10; i++) {
    MusicJsonToolbox.globalK = i / 10;
    outputContent += MusicJsonToolbox.globalK;
    outputContent += ';';
    outputContent += MusicJsonToolbox.pitchDurationSimilarity(json1Content, json2Content, false).toFixed(3);
    outputContent += '\n';
  }
} else if (algorithmValue === 'gar') {
  outputContent = 'k1;k3;similarity\n';
  for (i = 1; i <= 10; i++) {
    for (j = 1; j <= 10; j++) {
      MusicJsonToolbox.globalK1 = j / 10;
      MusicJsonToolbox.globalK3 = i / 10;
      outputContent += MusicJsonToolbox.globalK1;
      outputContent += ';';
      outputContent += MusicJsonToolbox.globalK3;
      outputContent += ';';
      outputContent += MusicJsonToolbox.pitchDurationSimilarity(json1Content, json2Content, true).toFixed(3);
      outputContent += '\n';
    }
  }
}

mkdirp(path.dirname(outputPath), function(err) {
  if (err) {
    throw err;
  }
  fs.writeFileSync(outputPath, outputContent);
});
